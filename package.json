{
  "name": "@tcx4c70/coc-csharp",
  "version": "0.0.6",
  "description": "C# extension for coc.nvim",
  "author": "Adam Tao <tcx4c70@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "vim",
    "neovim",
    "csharp",
    "roslyn"
  ],
  "engines": {
    "coc": "^0.0.82"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tcx4c70/coc-csharp.git"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "watch": "node esbuild.mjs --watch",
    "build": "node esbuild.mjs",
    "prepare": "node esbuild.mjs"
  },
  "devDependencies": {
    "@types/node": "^22.9.0",
    "@types/node-fetch": "^2.6.12",
    "@types/uuid": "^10.0.0",
    "coc.nvim": "0.0.83-next.18",
    "esbuild": "^0.19.8",
    "typescript": "^5.3.3"
  },
  "activationEvents": [
    "onLanguage:csharp",
    "onLanguage:cs",
    "workspaceContains:**/*.{sln,csproj}"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "cs",
        "patterns": [
          "*.sln"
        ]
      },
      {
        "filetype": "csharp",
        "patterns": [
          "*.sln"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          "appsettings.json",
          "appsettings.*.json"
        ],
        "url": "https://json.schemastore.org/appsettings.json"
      },
      {
        "fileMatch": "global.json",
        "url": "https://json.schemastore.org/global.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-csharp configuration",
      "properties": {
        "csharp.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-csharp extension"
        },
        "csharp.server.path": {
          "type": "string",
          "default": "",
          "description": "Path to roslyn language server (note: need to be the path of the dll file instead of the executable file), e.g.: ~/.roslyn/content/LanguageServer/osx-arm64/Microsoft.CodeAnalysis.LanguageServer.dll. If it's empty, the extension will download roslyn language server and use it."
        },
        "csharp.server.checkUpdateDuration": {
          "type": "string",
          "enum": [
            "never",
            "always",
            "daily",
            "weekly",
            "monthly"
          ],
          "default": "weekly",
          "enumDescriptions": [
            "Never check for updates",
            "Always check for updates",
            "Check for updates daily",
            "Check for updates weekly",
            "Check for updates monthly"
          ],
          "description": "Duration to check for updates of roslyn language server (only work if coc.server.path is empty). Suggest not to set it to 'always' or 'daily' because the roslyn language server hasn't an official/stable release channel and it will release a new version frequently."
        },
        "dotnet.typeMembers.memberInsertionLocation": {
          "type": "string",
          "enum": [
            "withOtherMembersOfTheSameKind",
            "atTheEnd"
          ],
          "default": "withOtherMembersOfTheSameKind",
          "enumDescriptions": [
            "Place them with other members of the same kind.",
            "Place them at the end."
          ],
          "description": "The insertion location of properties, events, and methods When implement interface or abstract class."
        },
        "dotnet.typeMembers.propertyGenerationBehavior": {
          "type": "string",
          "enum": [
            "preferThrowingProperties",
            "preferAutoProperties"
          ],
          "default": "preferThrowingProperties",
          "enumDescriptions": [
            "Prefer throwing properties.",
            "Prefer auto properties."
          ],
          "description": "Generation behavior of properties when implement interface or abstract class."
        },
        "dotnet.codeLens.enableReferencesCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Specifies whether the references CodeLens should be shown."
        },
        "dotnet.codeLens.enableTestsCodeLens": {
          "type": "boolean",
          "default": true,
          "description": "Specifies whether the run and debug test CodeLens should be shown."
        },
        "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": {
          "type": "boolean",
          "default": true,
          "description": "Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file."
        },
        "dotnet.completion.showNameCompletionSuggestions": {
          "type": "boolean",
          "default": true,
          "description": "Perform automatic object name completion for the members that you have recently selected."
        },
        "dotnet.completion.provideRegexCompletions": {
          "type": "boolean",
          "default": true,
          "description": "Show regular expressions in completion list."
        },
        "dotnet.completion.triggerCompletionInArgumentLists": {
          "type": "boolean",
          "default": true,
          "description": "Automatically show completion list in argument lists"
        },
        "dotnet.backgroundAnalysis.analyzerDiagnosticsScope": {
          "type": "string",
          "enum": [
            "openFiles",
            "fullSolution",
            "none"
          ],
          "default": "openFiles",
          "enumDescriptions": [
            "Open documents",
            "Entire solution",
            "None"
          ],
          "description": "Run background code analysis for:"
        },
        "dotnet.backgroundAnalysis.compilerDiagnosticsScope": {
          "type": "string",
          "enum": [
            "openFiles",
            "fullSolution",
            "none"
          ],
          "default": "openFiles",
          "enumDescriptions": [
            "Open documents",
            "Entire solution",
            "None"
          ],
          "description": "Show compiler errors and warnings for:"
        },
        "dotnet.highlighting.highlightRelatedRegexComponents": {
          "type": "boolean",
          "default": true,
          "description": "Highlight related regular expression components under cursor."
        },
        "dotnet.highlighting.highlightRelatedJsonComponents": {
          "type": "boolean",
          "default": true,
          "description": "Highlight related JSON components under cursor."
        },
        "csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for implicit object creation"
        },
        "csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for variables with inferred types"
        },
        "csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for lambda parameter types"
        },
        "csharp.inlayHints.enableInlayHintsForTypes": {
          "type": "boolean",
          "default": false,
          "description": "Display inline type hints"
        },
        "dotnet.inlayHints.enableInlayHintsForIndexerParameters": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for indexers"
        },
        "dotnet.inlayHints.enableInlayHintsForLiteralParameters": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for literals"
        },
        "dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for 'new' expressions"
        },
        "dotnet.inlayHints.enableInlayHintsForOtherParameters": {
          "type": "boolean",
          "default": false,
          "description": "Show hints for everything else"
        },
        "dotnet.inlayHints.enableInlayHintsForParameters": {
          "type": "boolean",
          "default": false,
          "description": "Display inline parameter name hints"
        },
        "dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": {
          "type": "boolean",
          "default": false,
          "description": "Suppress hints when parameter names differ only by suffix"
        },
        "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": {
          "type": "boolean",
          "default": false,
          "description": "Suppress hints when argument matches parameter name"
        },
        "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": {
          "type": "boolean",
          "default": false,
          "description": "Suppress hints when parameter name matches the method's intent"
        },
        "dotnet.navigation.navigateToDecompiledSources": {
          "type": "boolean",
          "default": true,
          "description": "Enable navigation to decomplied sources."
        },
        "dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": {
          "type": "boolean",
          "default": true,
          "description": "Enable navigation to source link and embedded sources."
        },
        "dotnet.quickInfo.showRemarksInQuickInfo": {
          "type": "boolean",
          "default": true,
          "description": "Show remarks information when display symbol."
        },
        "dotnet.symbolSearch.searchReferenceAssemblies": {
          "type": "boolean",
          "default": true,
          "description": "Search symbols in reference assemblies. It affects features requires symbol searching, such as add imports."
        },
        "dotnet.projects.binaryLogPath": {
          "scope": "machine-overridable",
          "type": "string",
          "default": null,
          "description": "Sets a path where MSBuild binary logs are written to when loading projects, to help diagnose loading errors."
        },
        "dotnet.projects.enableAutomaticRestore": {
          "type": "boolean",
          "default": true,
          "description": "Enables automatic NuGet restore if the extension detects assets are missing."
        }
      }
    },
    "commands": [
      {
        "command": "dotnet.openSolution",
        "title": "Open Solution",
        "category": ".NET"
      },
      {
        "command": "dotnet.restartServer",
        "title": "Restart Language Server",
        "category": ".NET"
      },
      {
        "comamnd": "dotnet.restore.all",
        "title": "Restore All Projects",
        "category": ".NET"
      },
      {
        "command": "dotnet.restore.project",
        "title": "Restore Project",
        "category": ".NET"
      }
    ]
  },
  "dependencies": {
    "coc-utils": "^0.0.17",
    "detect-libc": "^2.0.3",
    "node-fetch": "2.7.0",
    "unzip-stream": "^0.3.4",
    "uuid": "^11.0.3",
    "vscode-languageserver-protocol": "^3.17.5"
  }
}
